# -*- coding: utf-8 -*-
"""Wine Quality Prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qA7cxVtbiVuZFsrXuz4QBnd60UibYOkP

Data Source: https://www.kaggle.com/datasets/uciml/red-wine-quality-cortez-et-al-2009
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

"""Data Collection"""

wine_dataset = pd.read_csv("./winequality-red.csv")

print(wine_dataset.shape)

print(wine_dataset.head())

print(wine_dataset.isnull().sum())

"""Data Analysis and Visualisation"""

# statistical measure
print(wine_dataset.describe())

# number of values for each quality
sns.catplot(x='quality',data=wine_dataset,kind='count')

# volatile acidity vs quality
plot = plt.figure(figsize=(5,5))
sns.barplot(x='quality', y='volatile acidity', data=wine_dataset)

"""Correlation"""

correlation = wine_dataset.corr()

# Heatmap for correlation understanding
plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt=".1f", annot=True, annot_kws={'size':8}, cmap='Blues')

"""Data Preprocessing"""

# seperate data and label
X = wine_dataset.drop('quality',axis=1)

"""Label Binarization"""

# 3-6 = 0(Bad), 7-8 = 1(Good)
Y = wine_dataset['quality'].apply(lambda y_value: 1 if y_value>= 7 else 0)

print(Y)

"""Train Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training"""

model = RandomForestClassifier()

model.fit(X_train, Y_train)

"""Model Evaluation"""

X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print(training_data_accuracy)

X_test_prediction = model.predict(X_test)
testing_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print(testing_data_accuracy)

"""Make a Predictive System"""

# input_data = (0,1,...,...)
# input_data_as_numpy_array = np.asarray(input_data)
# input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

input_data = X_test.iloc[:1]
prediction = model.predict(input_data)
# print(Y_test.iloc[:1])
if(prediction[0] == 0):
  print("This quality of this wine is bad")
else:
  print("This quality of this wine is good")