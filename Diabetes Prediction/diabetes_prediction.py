# -*- coding: utf-8 -*-
"""Diabetes Prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12w0npp3R8_KeLsPyqFZaO8hycheYZMBf
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler  # Standardise the data to a common range
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection and Analysis

PIMA Diabetes Dataset
"""

# loading diabetes Dataset
diabetes_dataset = pd.read_csv("./diabetes.csv");

print(diabetes_dataset.head())

# number of rows and columns in the dataset
print(diabetes_dataset.shape);

# getting statistical measures of the data
print(diabetes_dataset.describe());

# get the particular column by column name
print(diabetes_dataset['Outcome'].value_counts());  # how many 1 and 0

"""0 --> Non-Diabetic

1 --> Diabetic
"""

print(diabetes_dataset.groupby('Outcome').mean());

X = diabetes_dataset.drop(columns='Outcome', axis=1);  # axis 1 = column, axis 0 = row
Y = diabetes_dataset['Outcome'];

"""Data Standardisation"""

scaler = StandardScaler();

scaler.fit(X.values);

standardised_data = scaler.transform(X.values);

print(standardised_data);

X = standardised_data;

"""Train Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2);

print(X.shape, X_train.shape, X_test.shape)

"""Training Model"""

classifier = svm.SVC(kernel='linear');

classifier.fit(X_train, Y_train);

"""Module Evaluation"""

# Accuracy Training data
X_train_prediction = classifier.predict(X_train);
X_train_accuracy = accuracy_score(X_train_prediction, Y_train);

print(X_train_accuracy);

# Accuracy Test data
X_test_prediction = classifier.predict(X_test);
X_test_accuracy = accuracy_score(X_test_prediction, Y_test);

print(X_test_accuracy);

"""Make Predictive System"""

input_data = (1, 89, 66, 23, 94, 28.1, 0.167, 21);

input_data_as_numpy_array = np.asarray(input_data);

input_data_reshaped = input_data_as_numpy_array.reshape(1, -1);

# standardised input data
std_data = scaler.transform(input_data_reshaped);

prediction = classifier.predict(std_data);

if (prediction[0] == 1):
    print("This person is diabetic");
else:
    print("This person is not diabetic");
