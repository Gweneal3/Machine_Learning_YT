# -*- coding: utf-8 -*-
"""Loan Status Prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10YIXmMwLbUFCiwyocJDbKA6BgrmY3W8v

Data Source: https://www.kaggle.com/datasets/ninzaami/loan-predication
"""

import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection and Processing"""

# loading the dataset to pandas DataFrame
loan_dataset = pd.read_csv("./train.csv")

print(loan_dataset.head())

print(loan_dataset.shape)

# Statistical Measure
print(loan_dataset.describe())

# check about the missing value
print(loan_dataset.isnull().sum())

"""Deal with the missing value"""

# If numerical -> can find mean, but this dataset has many categorical data, cannot do imputation method
# DROP missing value
loan_dataset = loan_dataset.dropna()

print(loan_dataset.shape)
print(loan_dataset.isnull().sum())

"""Label encoding<br>
Current label - Y(YES), N(NO)<br>
Change to - 1(YES), 0(NO)
"""

loan_dataset = loan_dataset.replace({"Loan_Status":{'N':0,'Y':1}})

loan_dataset = loan_dataset.replace({"Married":{'No':0,'Yes':1}, 
                                     "Gender":{'Male':1,'Female':0},
                                     "Self_Employed":{'No':0,'Yes':1},
                                     "Property_Area":{'Rural':0,'Semiurban':1,'Urban':2},
                                     "Education":{'Graduate':1,'Not Graduate':0}})

print(loan_dataset)

# Dependent column values
print(loan_dataset['Dependents'].value_counts())

# 3+ not good data type, so change to 4
loan_dataset = loan_dataset.replace(to_replace = '3+',value=4)

"""Data Visualisation"""

# education vs loan status
sns.countplot(x='Education',hue='Loan_Status',data=loan_dataset)

# married vs loan status
sns.countplot(x='Married',hue='Loan_Status',data=loan_dataset)

# Separate data and label
X = loan_dataset.drop(columns=['Loan_ID','Loan_Status'], axis=1)
Y = loan_dataset['Loan_Status']

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.1, stratify=Y, random_state=0)

print(X.shape, X_train.shape, X_test.shape)

"""Training Model"""

classifier = svm.SVC(kernel='linear')

classifier.fit(X_train, Y_train)

"""Model Evaluation"""

X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print(training_data_accuracy)

X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print(test_data_accuracy)

"""Make a predictive system"""

input_data = X_test.iloc[:1]
prediction = classifier.predict(input_data)
if(prediction[0] == 0):
  print("Loan Status: Failed")
else:
  print("Loan Status: Success")