# -*- coding: utf-8 -*-
"""Rock vs Mine Prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ImOyQeDtwiCW6LnwhmMCm2zfhMWdygVd
"""

# pip3 install numpy
import numpy as np
import pandas as pd
# pip install -U scikit-learn
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split

"""DATA COLLECTION AND DATA PROCESSING"""

# LOADING DATASET TO PANDAS DATAFRAME
sonar_data = pd.read_csv('./sonar data.csv', header=None);  # If no header, need to mention none

print(sonar_data.head())

# number of rows and columns
print(sonar_data.shape)

# Statistical measure of the data
print(sonar_data.describe())

# find how many mine and rock are there
print(sonar_data[60].value_counts());  # 60 is the column index

"""M -> Mine

R -> Rock
"""

print(sonar_data.groupby(60).mean())

# Separating data and Labels
X = sonar_data.drop(columns=60, axis=1);
Y = sonar_data[60];

print(X);
print(Y);

"""Train & Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.1, stratify=Y, random_state=0);

print(X.shape, X_train.shape, X_test.shape);
print(X_train, Y_train);

"""Model Training : Logistic Regression"""

model = LogisticRegression();

# training the model
model.fit(X_train, Y_train);

"""Model Evaluation"""

# Accuracy of the model(training data)
X_train_prediction = model.predict(X_train);
training_data_accuracy = accuracy_score(X_train_prediction, Y_train);

print(training_data_accuracy);

# Accuracy of the model(test data)
X_test_prediction = model.predict(X_test);
test_data_accuracy = accuracy_score(X_test_prediction, Y_test);

print(test_data_accuracy);

"""Making a Predictive System"""

input_data = (
0.0453, 0.0523, 0.0843, 0.0689, 0.1183, 0.2583, 0.2156, 0.3481, 0.3337, 0.2872, 0.4918, 0.6552, 0.6919, 0.7797, 0.7464,
0.9444, 1.0000, 0.8874, 0.8024, 0.7818, 0.5212, 0.4052, 0.3957, 0.3914, 0.3250, 0.3200, 0.3271, 0.2767, 0.4423, 0.2028,
0.3788, 0.2947, 0.1984, 0.2341, 0.1306, 0.4182, 0.3835, 0.1057, 0.1840, 0.1970, 0.1674, 0.0583, 0.1401, 0.1628, 0.0621,
0.0203, 0.0530, 0.0742, 0.0409, 0.0061, 0.0125, 0.0084, 0.0089, 0.0048, 0.0094, 0.0191, 0.0140, 0.0049, 0.0052, 0.0044);

# changing input_data to a numpy array
input_data_as_numpy_array = np.asarray(input_data);

# reshape np array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1);

prediction = model.predict(input_data_reshaped);

if (prediction[0] == 'R'):
    print("The object is the rock");
else:
    print("The object is mine.");
