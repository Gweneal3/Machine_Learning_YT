# -*- coding: utf-8 -*-
"""House Price Prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10_6MMMO14Ny8_Cp3Qo_IC-h5Ku0W0plU
"""

# pip install scikit-learn==1.1.3

import numpy as np;
import pandas as pd;
import matplotlib.pyplot as plt;
import seaborn as sns;
import sklearn.datasets;
from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split;
from xgboost import XGBRegressor;
from sklearn import metrics;

"""Importing the Boston/California House Price Dataset"""

# Boston
# boston_house_price_dataset = sklearn.datasets.load_boston();

# California
california_house_price_dataset = fetch_california_housing();

# print(boston_house_price_dataset);

# print(california_house_price_dataset);

# Loading dataset to Pandas DataFrame
# boston_house_price_dataframe = pd.DataFrame(boston_house_price_dataset.data,
#                                             columns=boston_house_price_dataset.feature_names);
california_house_price_dataframe = pd.DataFrame(california_house_price_dataset.data, columns=california_house_price_dataset.feature_names);

# add the target(price) column to the DataFrame
# boston_house_price_dataframe['PRICE'] = boston_house_price_dataset.target;
california_house_price_dataframe['PRICE'] = california_house_price_dataset.target;

# print(boston_house_price_dataframe.head());

print(california_house_price_dataframe.head());

# print(boston_house_price_dataframe.shape);

# Check for missing value
# boston_house_price_dataframe.isnull().sum();
print(california_house_price_dataframe.isnull().sum());

# print(boston_house_price_dataframe.describe());
print(california_house_price_dataframe.describe());
"""Understanding the correlation between various features in the dataset

1. Positive Correlation?
2. Negative Correlation?
"""

correlation = california_house_price_dataframe.corr();

print(correlation);

"""Construct heatmap to understand correlation"""

plt.figure(figsize=(10, 10));
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size': 8}, cmap='Blues');

X = california_house_price_dataframe.drop(['PRICE'], axis=1);
Y = california_house_price_dataframe['PRICE'];

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=1);

print(X.shape, X_train.shape, X_test.shape);

"""Model Training

XGBoost Regressor - Type of Decision Tree
"""

model = XGBRegressor();

model.fit(X_train, Y_train);

"""Evaluation"""

training_data_prediction = model.predict(X_train);
print(training_data_prediction);

# R Squared Error
score_1 = metrics.r2_score(Y_train, training_data_prediction);
print(score_1);  # <5

# Mean Absolute Error
score_2 = metrics.mean_absolute_error(Y_train, training_data_prediction);
print(score_2);  # <5

"""Visualising Actual and Predicted"""

# plt.scatter(Y_train, training_data_prediction);
# plt.xlabel("Actual Price");
# plt.ylabel("Predicted Price");
# plt.title("Actual Price vs Predicted Price");

testing_data_prediction = model.predict(X_test);
print(testing_data_prediction);

# R Squared Error
score_1 = metrics.r2_score(Y_test, testing_data_prediction);
print(score_1);  # <5

# Mean Absolute Error
score_2 = metrics.mean_absolute_error(Y_test, testing_data_prediction);
print(score_2);  # <5

# plt.scatter(Y_test, testing_data_prediction);
# plt.xlabel("Actual Price");
# plt.ylabel("Predicted Price");
# plt.title("Actual Price vs Predicted Price");
plt.show();
